
#include "Walk.hpp"

void Walk::onReset() {
	_trigger.reset();
	_modulationStep = modulationSteps;
}

void Walk::onSampleRateChange() {
	_modulationStep = modulationSteps;
}

void Walk::step() {
	lights[TRACK_LIGHT].value = params[TRACK_PARAM].value;

	++_modulationStep;
	if (_modulationStep >= modulationSteps) {
		_modulationStep = 0;

		float rate = params[RATE_PARAM].value;
		if (inputs[RATE_INPUT].active) {
			rate *= clamp(inputs[RATE_INPUT].value / 10.0f, 0.0f, 1.0f);
		}
		rate *= rate;
		rate *= rate;
		_walk.setParams(engineGetSampleRate(), rate);
	}

	float out = _walk.next();
	out *= params[SCALE_PARAM].value;
	out += params[OFFSET_PARAM].value * 5.0f;
	outputs[OUT_OUTPUT].value = out;

	bool triggered = _trigger.process(inputs[HOLD_INPUT].value);
	if (params[TRACK_PARAM].value > 0.5f ? _trigger.isHigh() : triggered) {
		_hold = out;
	}
	outputs[HOLD_OUTPUT].value = _hold;
}

struct WalkWidget : ModuleWidget {
	static constexpr int hp = 3;

	WalkWidget(Walk* module) : ModuleWidget(module) {
		box.size = Vec(RACK_GRID_WIDTH * hp, RACK_GRID_HEIGHT);

		{
			SVGPanel *panel = new SVGPanel();
			panel->box.size = box.size;
			panel->setBackground(SVG::load(assetPlugin(plugin, "res/Walk.svg")));
			addChild(panel);
		}

		addChild(Widget::create<ScrewSilver>(Vec(0, 0)));
		addChild(Widget::create<ScrewSilver>(Vec(box.size.x - 15, 365)));

		// generated by svg_widgets.rb
		auto rateParamPosition = Vec(8.0, 36.0);
		auto offsetParamPosition = Vec(14.5, 137.0);
		auto scaleParamPosition = Vec(14.5, 178.0);
		auto trackParamPosition = Vec(29.0, 246.7);

		auto rateInputPosition = Vec(10.5, 77.0);
		auto holdInputPosition = Vec(10.5, 210.0);

		auto holdOutputPosition = Vec(10.5, 261.0);
		auto outOutputPosition = Vec(10.5, 296.0);

		auto trackLightPosition = Vec(7.0, 248.0);
		// end generated by svg_widgets.rb

		addParam(ParamWidget::create<Knob29>(rateParamPosition, module, Walk::RATE_PARAM, 0.0, 1.0, 0.1));
		addParam(ParamWidget::create<Knob16>(offsetParamPosition, module, Walk::OFFSET_PARAM, -1.0, 1.0, 0.0));
		addParam(ParamWidget::create<Knob16>(scaleParamPosition, module, Walk::SCALE_PARAM, 0.0, 1.0, 1.0));
		addParam(ParamWidget::create<StatefulButton9>(trackParamPosition, module, Walk::TRACK_PARAM, 0.0, 1.0, 0.0));

		addInput(Port::create<Port24>(rateInputPosition, Port::INPUT, module, Walk::RATE_INPUT));
		addInput(Port::create<Port24>(holdInputPosition, Port::INPUT, module, Walk::HOLD_INPUT));

		addOutput(Port::create<Port24>(holdOutputPosition, Port::OUTPUT, module, Walk::HOLD_OUTPUT));
		addOutput(Port::create<Port24>(outOutputPosition, Port::OUTPUT, module, Walk::OUT_OUTPUT));

		addChild(ModuleLightWidget::create<SmallLight<GreenLight>>(trackLightPosition, module, Walk::TRACK_LIGHT));
	}
};

RACK_PLUGIN_MODEL_INIT(Bogaudio, Walk) {
   Model* modelWalk = createModel<Walk, WalkWidget>("Bogaudio-Walk", "Walk", "random-walk CV source", RANDOM_TAG);
   return modelWalk;
}
