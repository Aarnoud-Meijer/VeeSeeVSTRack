
#include "SampleHold.hpp"

void SampleHold::onReset() {
	_trigger1.reset();
	_value1 = 0.0f;
	_trigger2.reset();
	_value2 = 0.0f;
}

void SampleHold::step() {
	{
		lights[TRACK1_LIGHT].value = params[TRACK1_PARAM].value;
		bool triggered = _trigger1.process(params[TRIGGER1_PARAM].value + inputs[TRIGGER1_INPUT].value);
		if (params[TRACK1_PARAM].value > 0.5f ? _trigger1.isHigh() : triggered) {
			if (inputs[IN1_INPUT].active) {
				_value1 = inputs[IN1_INPUT].value;
			}
			else {
				_value1 = fabsf(_noise.next()) * 10.0;
			}
		}
		outputs[OUT1_OUTPUT].value = _value1;
	}

	{
		lights[TRACK2_LIGHT].value = params[TRACK2_PARAM].value;
		bool triggered = _trigger2.process(params[TRIGGER2_PARAM].value + inputs[TRIGGER2_INPUT].value);
		if (params[TRACK2_PARAM].value > 0.5f ? _trigger2.isHigh() : triggered) {
			if (inputs[IN2_INPUT].active) {
				_value2 = inputs[IN2_INPUT].value;
			}
			else {
				_value2 = fabsf(_noise.next()) * 10.0;
			}
		}
		outputs[OUT2_OUTPUT].value = _value2;
	}
}

struct SampleHoldWidget : ModuleWidget {
	static constexpr int hp = 3;

	SampleHoldWidget(SampleHold* module) : ModuleWidget(module) {
		box.size = Vec(RACK_GRID_WIDTH * hp, RACK_GRID_HEIGHT);

		{
			SVGPanel *panel = new SVGPanel();
			panel->box.size = box.size;
			panel->setBackground(SVG::load(assetPlugin(plugin, "res/SampleHold.svg")));
			addChild(panel);
		}

		addChild(Widget::create<ScrewSilver>(Vec(0, 0)));
		addChild(Widget::create<ScrewSilver>(Vec(box.size.x - 15, 365)));

		// generated by svg_widgets.rb
		auto trigger1ParamPosition = Vec(13.5, 27.0);
		auto track1ParamPosition = Vec(29.0, 122.7);
		auto trigger2ParamPosition = Vec(13.5, 190.0);
		auto track2ParamPosition = Vec(29.0, 285.7);

		auto trigger1InputPosition = Vec(10.5, 49.0);
		auto in1InputPosition = Vec(10.5, 86.0);
		auto trigger2InputPosition = Vec(10.5, 212.0);
		auto in2InputPosition = Vec(10.5, 249.0);

		auto out1OutputPosition = Vec(10.5, 137.0);
		auto out2OutputPosition = Vec(10.5, 300.0);

		auto track1LightPosition = Vec(7.0, 124.0);
		auto track2LightPosition = Vec(7.0, 287.0);
		// end generated by svg_widgets.rb

		addParam(ParamWidget::create<Button18>(trigger1ParamPosition, module, SampleHold::TRIGGER1_PARAM, 0.0, 1.0, 0.0));
		addParam(ParamWidget::create<Button18>(trigger2ParamPosition, module, SampleHold::TRIGGER2_PARAM, 0.0, 1.0, 0.0));
		addParam(ParamWidget::create<StatefulButton9>(track1ParamPosition, module, SampleHold::TRACK1_PARAM, 0.0, 1.0, 0.0));
		addParam(ParamWidget::create<StatefulButton9>(track2ParamPosition, module, SampleHold::TRACK2_PARAM, 0.0, 1.0, 0.0));

		addInput(Port::create<Port24>(trigger1InputPosition, Port::INPUT, module, SampleHold::TRIGGER1_INPUT));
		addInput(Port::create<Port24>(in1InputPosition, Port::INPUT, module, SampleHold::IN1_INPUT));
		addInput(Port::create<Port24>(trigger2InputPosition, Port::INPUT, module, SampleHold::TRIGGER2_INPUT));
		addInput(Port::create<Port24>(in2InputPosition, Port::INPUT, module, SampleHold::IN2_INPUT));

		addOutput(Port::create<Port24>(out1OutputPosition, Port::OUTPUT, module, SampleHold::OUT1_OUTPUT));
		addOutput(Port::create<Port24>(out2OutputPosition, Port::OUTPUT, module, SampleHold::OUT2_OUTPUT));

		addChild(ModuleLightWidget::create<SmallLight<GreenLight>>(track1LightPosition, module, SampleHold::TRACK1_LIGHT));
		addChild(ModuleLightWidget::create<SmallLight<GreenLight>>(track2LightPosition, module, SampleHold::TRACK2_LIGHT));
	}
};

RACK_PLUGIN_MODEL_INIT(Bogaudio, SampleHold) {
   Model *modelSampleHold = createModel<SampleHold, SampleHoldWidget>("Bogaudio-SampleHold", "S&H",  "dual sample and hold", SAMPLE_AND_HOLD_TAG, DUAL_TAG);
   return modelSampleHold;
}
